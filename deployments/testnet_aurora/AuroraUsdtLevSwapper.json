{
  "address": "0x19e0b0474bBF1EBA47A23EA0DFDbFEf5c4fca073",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AURORA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AURORAUSDT",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEGENBOX",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIMAURORA",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x27d59179c1aa61dc85bc853fdcdcd8d641d638094f9d9a79b5a6929b06db78af",
  "receipt": {
    "to": null,
    "from": "0x23a824dD17d6571e1BAdd25A6247C685D6802985",
    "contractAddress": "0x19e0b0474bBF1EBA47A23EA0DFDbFEf5c4fca073",
    "transactionIndex": 0,
    "gasUsed": "1406820",
    "logsBloom": "0x
    "blockHash": "0x79d7f71e8e917bcd838335c3957f0bbe0008133fcc1df9394b376a979571bf0b",
    "transactionHash": "0x27d59179c1aa61dc85bc853fdcdcd8d641d638094f9d9a79b5a6929b06db78af",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 80872579,
        "transactionHash": "0x27d59179c1aa61dc85bc853fdcdcd8d641d638094f9d9a79b5a6929b06db78af",
        "address": "0x60F49DA40230C67Aaa471685C66400C28b438FBC",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000019e0b0474bbf1eba47a23ea0dfdbfef5c4fca073",
          "0x000000000000000000000000cf9bbc99342a7704d61b2a06597aec98d76e9155"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x79d7f71e8e917bcd838335c3957f0bbe0008133fcc1df9394b376a979571bf0b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 80872579,
        "transactionHash": "0x27d59179c1aa61dc85bc853fdcdcd8d641d638094f9d9a79b5a6929b06db78af",
        "address": "0xaDeE31e4643D8891CaC9328B93BE002373428947",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000019e0b0474bbf1eba47a23ea0dfdbfef5c4fca073",
          "0x00000000000000000000000026ec2afbdfdfb972f106100a3deae5887353d9b9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x79d7f71e8e917bcd838335c3957f0bbe0008133fcc1df9394b376a979571bf0b"
      }
    ],
    "blockNumber": 80872579,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "45a2aea78a68275b26f937720c4b6093",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AURORA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AURORAUSDT\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEGENBOX\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIMAURORA\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Leverage/AuroraUsdtLevSwapper.sol\":\"AuroraUsdtLevSwapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x12091adc186fe351c639dc62aa0b691f78c7bea054c27bbb4b58acd02e1b2ce7\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.4;\\n\\n/// @notice Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method).\\nlibrary Babylonian {\\n    // computes square roots using the babylonian method\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\",\"keccak256\":\"0xa98dc6da967dcb959148d13d5cac4d3c6938562be7a27cdd52f394a2495a9c97\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swappers/Leverage/AuroraUsdtLevSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\\\";\\nimport \\\"../../libraries/Babylonian.sol\\\";\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface IBentoBoxV1 {\\n    function withdraw(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256, uint256);\\n\\n    function deposit(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256, uint256);\\n}\\n\\ncontract AuroraUsdtLevSwapper {\\n    IBentoBoxV1 public constant DEGENBOX = IBentoBoxV1(0xcF9bBc99342a7704D61b2A06597aEC98D76e9155);\\n    IUniswapV2Pair public constant AURORAUSDT = IUniswapV2Pair(0x60F49DA40230C67Aaa471685C66400C28b438FBC);\\n    IUniswapV2Pair public constant MIMAURORA = IUniswapV2Pair(0x618b11074D2E41fAd4eA20424fD512742866F277);\\n    IUniswapV2Router01 public constant ROUTER = IUniswapV2Router01(0x26ec2aFBDFdFB972F106100A3deaE5887353d9B9);\\n\\n    uint256 private constant DEADLINE = 0xf000000000000000000000000000000000000000000000000000000000000000; // ~ placeholder for swap deadline\\n\\n    IERC20 public constant MIM = IERC20(0xcDc61EDF7F1E2D89dd22F39eF442a29018AA5d82);\\n    IERC20 public constant AURORA = IERC20(0xaDeE31e4643D8891CaC9328B93BE002373428947);\\n    IERC20 public constant USDT = IERC20(0xfa1Ee6A11A8Ac851dEd1EF449878d1eE20D135EC);\\n\\n    constructor() {\\n        AURORAUSDT.approve(address(DEGENBOX), type(uint256).max);\\n        AURORA.approve(address(ROUTER), type(uint256).max);\\n        USDT.approve(address(ROUTER), type(uint256).max);\\n    }\\n\\n    function _calculateSwapInAmount(uint256 reserveIn, uint256 userIn) internal pure returns (uint256) {\\n        return (Babylonian.sqrt(reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))) - (reserveIn * 1997)) / 1994;\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * 1000) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // Swaps to a flexible amount, from an exact input amount\\n    function swap(\\n        address recipient,\\n        uint256 shareToMin,\\n        uint256 shareFrom\\n    ) public returns (uint256 extraShare, uint256 shareReturned) {\\n        (uint256 amountFrom, ) = DEGENBOX.withdraw(MIM, address(this), address(this), 0, shareFrom);\\n\\n        // Swap MIM to AURORA\\n        (uint256 reserve0, uint256 reserve1, ) = MIMAURORA.getReserves();\\n        uint256 auroraFromMim = _getAmountOut(amountFrom, reserve0, reserve1);\\n        MIM.transfer(address(MIMAURORA), amountFrom);\\n        MIMAURORA.swap(0, auroraFromMim, address(this), new bytes(0));\\n\\n        // Determine optimal amount of AURORA to swap for liquidity providing\\n        (reserve0, reserve1, ) = AURORAUSDT.getReserves();\\n        uint256 auroraSwapInAmount = _calculateSwapInAmount(reserve0, auroraFromMim);\\n        uint256 usdtAmount = _getAmountOut(auroraSwapInAmount, reserve0, reserve1);\\n        AURORA.transfer(address(AURORAUSDT), auroraSwapInAmount);\\n        AURORAUSDT.swap(0, usdtAmount, address(this), \\\"\\\");\\n\\n        ROUTER.addLiquidity(\\n            address(AURORA),\\n            address(USDT),\\n            AURORA.balanceOf(address(this)),\\n            USDT.balanceOf(address(this)),\\n            1,\\n            1,\\n            address(this),\\n            DEADLINE\\n        );\\n\\n        (, shareReturned) = DEGENBOX.deposit(IERC20(address(AURORAUSDT)), address(this), recipient, AURORAUSDT.balanceOf(address(this)), 0);\\n        extraShare = shareReturned - shareToMin;\\n    }\\n}\\n\",\"keccak256\":\"0xb0e9e9fc496de479e734cd32f6d0fa60ac223f50ce2957f5ac46e778625e2e8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b507360f49da40230c67aaa471685c66400c28b438fbc73ffffffffffffffffffffffffffffffffffffffff1663095ea7b373cf9bbc99342a7704d61b2a06597aec98d76e91557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200009792919062000311565b602060405180830381600087803b158015620000b257600080fd5b505af1158015620000c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ed9190620002c3565b5073adee31e4643d8891cac9328b93be00237342894773ffffffffffffffffffffffffffffffffffffffff1663095ea7b37326ec2afbdfdfb972f106100a3deae5887353d9b97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200017392919062000311565b602060405180830381600087803b1580156200018e57600080fd5b505af1158015620001a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c99190620002c3565b5073fa1ee6a11a8ac851ded1ef449878d1ee20d135ec73ffffffffffffffffffffffffffffffffffffffff1663095ea7b37326ec2afbdfdfb972f106100a3deae5887353d9b97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200024f92919062000311565b602060405180830381600087803b1580156200026a57600080fd5b505af11580156200027f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a59190620002c3565b50620003a2565b600081519050620002bd8162000388565b92915050565b600060208284031215620002d657600080fd5b6000620002e684828501620002ac565b91505092915050565b620002fa816200033e565b82525050565b6200030b816200037e565b82525050565b6000604082019050620003286000830185620002ef565b62000337602083018462000300565b9392505050565b60006200034b826200035e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620003938162000352565b81146200039f57600080fd5b50565b6116c880620003b26000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b48b7a1b1161005b578063b48b7a1b14610118578063c54e44eb14610136578063daec383d14610154578063e0bc66b81461017257610088565b80630abc58e91461008d57806332fe7b26146100ab5780634bd903ce146100c95780639f1d0f59146100e7575b600080fd5b610095610190565b6040516100a2919061122e565b60405180910390f35b6100b36101a8565b6040516100c09190611249565b60405180910390f35b6100d16101c0565b6040516100de919061122e565b60405180910390f35b61010160048036038101906100fc9190610e41565b6101d8565b60405161010f9291906112fa565b60405180910390f35b610120610ad5565b60405161012d919061116d565b60405180910390f35b61013e610aed565b60405161014b919061116d565b60405180910390f35b61015c610b05565b604051610169919061116d565b60405180910390f35b61017a610b1d565b6040516101879190611152565b60405180910390f35b73618b11074d2e41fad4ea20424fd512742866f27781565b7326ec2afbdfdfb972f106100a3deae5887353d9b981565b7360f49da40230c67aaa471685c66400c28b438fbc81565b600080600073cf9bbc99342a7704d61b2a06597aec98d76e915573ffffffffffffffffffffffffffffffffffffffff166397da6d3073cdc61edf7f1e2d89dd22f39ef442a29018aa5d8230306000896040518663ffffffff1660e01b8152600401610247959493929190611188565b6040805180830381600087803b15801561026057600080fd5b505af1158015610274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102989190610f31565b50905060008073618b11074d2e41fad4ea20424fd512742866f27773ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156102f857600080fd5b505afa15801561030c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103309190610eb9565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000610362848484610b35565b905073cdc61edf7f1e2d89dd22f39ef442a29018aa5d8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73618b11074d2e41fad4ea20424fd512742866f277866040518363ffffffff1660e01b81526004016103c7929190611129565b602060405180830381600087803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190610e90565b5073618b11074d2e41fad4ea20424fd512742866f27773ffffffffffffffffffffffffffffffffffffffff1663022c0d9f60008330600067ffffffffffffffff81111561048f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104c15781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016104e19493929190611264565b600060405180830381600087803b1580156104fb57600080fd5b505af115801561050f573d6000803e3d6000fd5b505050507360f49da40230c67aaa471685c66400c28b438fbc73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561056d57600080fd5b505afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190610eb9565b826dffffffffffffffffffffffffffff169250816dffffffffffffffffffffffffffff16915050809350819450505060006105e08483610b8d565b905060006105ef828686610b35565b905073adee31e4643d8891cac9328b93be00237342894773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb7360f49da40230c67aaa471685c66400c28b438fbc846040518363ffffffff1660e01b8152600401610654929190611129565b602060405180830381600087803b15801561066e57600080fd5b505af1158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190610e90565b507360f49da40230c67aaa471685c66400c28b438fbc73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f600083306040518463ffffffff1660e01b81526004016106f9939291906112b0565b600060405180830381600087803b15801561071357600080fd5b505af1158015610727573d6000803e3d6000fd5b505050507326ec2afbdfdfb972f106100a3deae5887353d9b973ffffffffffffffffffffffffffffffffffffffff1663e8e3370073adee31e4643d8891cac9328b93be00237342894773fa1ee6a11a8ac851ded1ef449878d1ee20d135ec73adee31e4643d8891cac9328b93be00237342894773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107d29190611090565b60206040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190610f08565b73fa1ee6a11a8ac851ded1ef449878d1ee20d135ec73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161086f9190611090565b60206040518083038186803b15801561088757600080fd5b505afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf9190610f08565b600180307ff0000000000000000000000000000000000000000000000000000000000000006040518963ffffffff1660e01b81526004016109079897969594939291906110ab565b606060405180830381600087803b15801561092157600080fd5b505af1158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190610f6d565b50505073cf9bbc99342a7704d61b2a06597aec98d76e915573ffffffffffffffffffffffffffffffffffffffff166302b9446c7360f49da40230c67aaa471685c66400c28b438fbc308e7360f49da40230c67aaa471685c66400c28b438fbc73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109f09190611090565b60206040518083038186803b158015610a0857600080fd5b505afa158015610a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a409190610f08565b60006040518663ffffffff1660e01b8152600401610a629594939291906111db565b6040805180830381600087803b158015610a7b57600080fd5b505af1158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190610f31565b9050809750508987610ac59190611420565b9750505050505050935093915050565b73adee31e4643d8891cac9328b93be00237342894781565b73fa1ee6a11a8ac851ded1ef449878d1ee20d135ec81565b73cdc61edf7f1e2d89dd22f39ef442a29018aa5d8281565b73cf9bbc99342a7704d61b2a06597aec98d76e915581565b6000806103e585610b4691906113c6565b905060008382610b5691906113c6565b90506000826103e887610b6991906113c6565b610b73919061133f565b90508082610b819190611395565b93505050509392505050565b60006107ca6107cd84610ba091906113c6565b610bdb623cda2986610bb291906113c6565b623cda2086610bc191906113c6565b610bcb919061133f565b86610bd691906113c6565b610bf7565b610be59190611420565b610bef9190611395565b905092915050565b600080821415610c0a5760009050610dbe565b60008290506000600190507001000000000000000000000000000000008210610c3c57608082901c9150604081901b90505b680100000000000000008210610c5b57604082901c9150602081901b90505b6401000000008210610c7657602082901c9150601081901b90505b620100008210610c8f57601082901c9150600881901b90505b6101008210610ca757600882901c9150600481901b90505b60108210610cbe57600482901c9150600281901b90505b60088210610cce57600181901b90505b60018185610cdc9190611395565b82610ce7919061133f565b901c905060018185610cf99190611395565b82610d04919061133f565b901c905060018185610d169190611395565b82610d21919061133f565b901c905060018185610d339190611395565b82610d3e919061133f565b901c905060018185610d509190611395565b82610d5b919061133f565b901c905060018185610d6d9190611395565b82610d78919061133f565b901c905060018185610d8a9190611395565b82610d95919061133f565b901c905060008185610da79190611395565b9050808210610db65780610db8565b815b93505050505b919050565b600081359050610dd28161161f565b92915050565b600081519050610de781611636565b92915050565b600081519050610dfc8161164d565b92915050565b600081359050610e1181611664565b92915050565b600081519050610e2681611664565b92915050565b600081519050610e3b8161167b565b92915050565b600080600060608486031215610e5657600080fd5b6000610e6486828701610dc3565b9350506020610e7586828701610e02565b9250506040610e8686828701610e02565b9150509250925092565b600060208284031215610ea257600080fd5b6000610eb084828501610dd8565b91505092915050565b600080600060608486031215610ece57600080fd5b6000610edc86828701610ded565b9350506020610eed86828701610ded565b9250506040610efe86828701610e2c565b9150509250925092565b600060208284031215610f1a57600080fd5b6000610f2884828501610e17565b91505092915050565b60008060408385031215610f4457600080fd5b6000610f5285828601610e17565b9250506020610f6385828601610e17565b9150509250929050565b600080600060608486031215610f8257600080fd5b6000610f9086828701610e17565b9350506020610fa186828701610e17565b9250506040610fb286828701610e17565b9150509250925092565b610fc581611454565b82525050565b6000610fd682611323565b610fe0818561132e565b9350610ff081856020860161157a565b610ff98161160b565b840191505092915050565b61100d816114c6565b82525050565b61101c816114ea565b82525050565b61102b8161150e565b82525050565b61103a81611532565b82525050565b61104981611556565b82525050565b61105881611568565b82525050565b600061106b60008361132e565b91506110768261161c565b600082019050919050565b61108a816114ac565b82525050565b60006020820190506110a56000830184610fbc565b92915050565b6000610100820190506110c1600083018b610fbc565b6110ce602083018a610fbc565b6110db6040830189611081565b6110e86060830188611081565b6110f5608083018761104f565b61110260a083018661104f565b61110f60c0830185610fbc565b61111c60e0830184611081565b9998505050505050505050565b600060408201905061113e6000830185610fbc565b61114b6020830184611081565b9392505050565b60006020820190506111676000830184611004565b92915050565b60006020820190506111826000830184611013565b92915050565b600060a08201905061119d6000830188611013565b6111aa6020830187610fbc565b6111b76040830186610fbc565b6111c46060830185611040565b6111d16080830184611081565b9695505050505050565b600060a0820190506111f06000830188611013565b6111fd6020830187610fbc565b61120a6040830186610fbc565b6112176060830185611081565b6112246080830184611040565b9695505050505050565b60006020820190506112436000830184611022565b92915050565b600060208201905061125e6000830184611031565b92915050565b60006080820190506112796000830187611040565b6112866020830186611081565b6112936040830185610fbc565b81810360608301526112a58184610fcb565b905095945050505050565b60006080820190506112c56000830186611040565b6112d26020830185611081565b6112df6040830184610fbc565b81810360608301526112f08161105e565b9050949350505050565b600060408201905061130f6000830185611081565b61131c6020830184611081565b9392505050565b600081519050919050565b600082825260208201905092915050565b600061134a826114ac565b9150611355836114ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561138a576113896115ad565b5b828201905092915050565b60006113a0826114ac565b91506113ab836114ac565b9250826113bb576113ba6115dc565b5b828204905092915050565b60006113d1826114ac565b91506113dc836114ac565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611415576114146115ad565b5b828202905092915050565b600061142b826114ac565b9150611436836114ac565b925082821015611449576114486115ad565b5b828203905092915050565b600061145f8261148c565b9050919050565b60008115159050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006114d1826114d8565b9050919050565b60006114e38261148c565b9050919050565b60006114f5826114fc565b9050919050565b60006115078261148c565b9050919050565b600061151982611520565b9050919050565b600061152b8261148c565b9050919050565b600061153d82611544565b9050919050565b600061154f8261148c565b9050919050565b6000611561826114ac565b9050919050565b6000611573826114ac565b9050919050565b60005b8381101561159857808201518184015260208101905061157d565b838111156115a7576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b50565b61162881611454565b811461163357600080fd5b50565b61163f81611466565b811461164a57600080fd5b50565b61165681611472565b811461166157600080fd5b50565b61166d816114ac565b811461167857600080fd5b50565b611684816114b6565b811461168f57600080fd5b5056fea2646970667358221220cabc178797890a93ec101032416d9c03041625ba0aad2ea900e9bc023640fb4564736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}